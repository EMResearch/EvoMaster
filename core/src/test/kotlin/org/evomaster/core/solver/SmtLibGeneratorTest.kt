package org.evomaster.core.solver

import net.sf.jsqlparser.JSQLParserException
import net.sf.jsqlparser.parser.CCJSqlParserUtil
import net.sf.jsqlparser.statement.Statement
import org.evomaster.client.java.sql.SchemaExtractor
import org.evomaster.client.java.sql.SqlScriptRunner
import org.evomaster.solver.smtlib.*
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import org.testcontainers.shaded.com.google.common.collect.ImmutableList
import java.sql.Connection
import java.sql.DriverManager
import java.sql.SQLException

class SmtLibGeneratorTest {

    companion object {
        private lateinit var generator: SmtLibGenerator
        private lateinit var connection: Connection

        @JvmStatic
        @BeforeAll
        @Throws(Exception::class)
        fun setup() {
            connection = DriverManager.getConnection("jdbc:h2:mem:constraint_test", "sa", "")
            SqlScriptRunner.execCommand(connection, "CREATE TABLE users(id bigint generated by default as identity primary key, name varchar(255), age int, points int);\n")
            val schemaDto = SchemaExtractor.extract(connection)

            generator = SmtLibGenerator(schemaDto, 2)
        }

        @JvmStatic
        @AfterAll
        @Throws(SQLException::class)
        fun tearDown() {
            connection.close()
        }
    }

    /**
     * Test the generation of SMT from a simple select statement and a database schema
     * @throws JSQLParserException if the statement is not valid
     */
    @Test
    @Throws(JSQLParserException::class)
    fun selectFromUsers() {
        val selectStatement: Statement = CCJSqlParserUtil.parse("SELECT * FROM Users;")
        val response: SMTLib = generator.generateSMT(selectStatement)

        val expected = SMTLib().apply {
            addNode(DeclareDatatype("UsersRow", ImmutableList.of(
                DeclareConst("ID", "Int"),
                DeclareConst("NAME", "String"),
                DeclareConst("AGE", "Int"),
                DeclareConst("POINTS", "Int")
            )))
            addNode(DeclareConst("users1", "UsersRow"))
            addNode(DeclareConst("users2", "UsersRow"))
            addNode(CheckSat())
            addNode(GetValue("users1"))
            addNode(GetValue("users2"))
        }

        assertEquals(expected, response)
    }
}
